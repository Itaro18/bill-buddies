// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type              String?
  scope                   String?
  id_token                String? @db.Text
  session_state           String?
  user                    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  groups        Group[]       @relation("UserGroups")
  expenses      Expense[]
  userExpenses  UserExpense[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Group {
  id           String        @id @default(cuid())
  name         String
  users        User[]        @relation("UserGroups")
  expenses     Expense[]
  userExpenses UserExpense[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  inviteCode   String        @default("")
  inviteExpiry DateTime      @default(now())
}

model Expense {
  id           String        @id @default(cuid())
  description  String
  amount       Float
  date         DateTime
  paidBy       User          @relation(fields: [paidById], references: [id], onDelete: Cascade, onUpdate: Cascade)
  paidById     String
  group        Group         @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  groupId      String
  userExpenses UserExpense[]
  isSettlement Boolean
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model UserExpense {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     String
  expense    Expense  @relation(fields: [expenseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  expenseId  String
  group      Group    @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  groupId    String
  amount     Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}